/* Generated By:JavaCC: Do not edit this line. AstParser.java */
package ast;
import java.util.*;
import java.io.*;

public class AstParser implements AstParserConstants {
  public static void main(String [] args) throws Exception {
    if (args.length == 1) {
      FileInputStream stream = new FileInputStream(args[0]);
      Ast.Program p = new AstParser(stream).Program();
      stream.close();
      System.out.print(p);
    } else {
      System.out.println("Need one file name as command-line argument.");
    }
  }

// Program -> {ClassDecl}
//
  static final public Ast.Program Program() throws ParseException {
  List<Ast.ClassDecl> cl = new ArrayList<Ast.ClassDecl>();
  Ast.ClassDecl c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = ClassDecl();
                    cl.add(c);
    }
    jj_consume_token(0);
    {if (true) return new Ast.Program(cl);}
    throw new Error("Missing return statement in function");
  }

// ClassDecl -> "ClassDecl" <Id> [<Id>] {VarDecl} {MethodDecl}
//
  static final public Ast.ClassDecl ClassDecl() throws ParseException {
  List<Ast.VarDecl> vl = new ArrayList<Ast.VarDecl>();
  List<Ast.MethodDecl> ml = new ArrayList<Ast.MethodDecl>();
  String nm, pnm=null;
  Ast.VarDecl v;
  Ast.MethodDecl m;
    jj_consume_token(14);
    nm = IdName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      pnm = IdName();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      v = VarDecl();
                  vl.add(v);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      m = MethodDecl();
                     ml.add(m);
    }
    {if (true) return new Ast.ClassDecl(nm, pnm, vl, ml);}
    throw new Error("Missing return statement in function");
  }

// VarDecl -> "VarDecl" Type <Id> Exp
//
  static final public Ast.VarDecl VarDecl() throws ParseException {
  String nm;
  Ast.Type t;
  Ast.Exp init;
    jj_consume_token(30);
    t = Type();
    nm = IdName();
    init = Exp();
    {if (true) return new Ast.VarDecl(t, nm, init);}
    throw new Error("Missing return statement in function");
  }

// MethodDecl -> "MethodDecl" Type <Id> "(" {Param} ")" {VarDecl} {Stmt}
//
  static final public Ast.MethodDecl MethodDecl() throws ParseException {
  List<Ast.Param> pl = new ArrayList<Ast.Param>();
  List<Ast.VarDecl> vl = new ArrayList<Ast.VarDecl>();
  List<Ast.Stmt> sl = new ArrayList<Ast.Stmt>();
  String nm;
  Ast.Type t;
  Ast.Param p;
  Ast.VarDecl v;
  Ast.Stmt s;
    jj_consume_token(21);
    t = Type();
    nm = IdName();
    jj_consume_token(40);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      p = Param();
                                                      pl.add(p);
    }
    jj_consume_token(41);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      v = VarDecl();
                  vl.add(v);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 13:
      case 19:
      case 25:
      case 27:
      case 32:
      case 42:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      s = Stmt();
                                               sl.add(s);
    }
    {if (true) return new Ast.MethodDecl(t, nm, pl, vl, sl);}
    throw new Error("Missing return statement in function");
  }

// Param -> "(" Type <Id> ")"
//
  static final public Ast.Param Param() throws ParseException {
  String nm; Ast.Type t;
    jj_consume_token(40);
    jj_consume_token(18);
    t = Type();
    nm = IdName();
    jj_consume_token(41);
    {if (true) return new Ast.Param(t, nm);}
    throw new Error("Missing return statement in function");
  }

// Type -> "void"
//      |  "IntType" 
//      |  "DblType" 
//      |  "BoolType" 
//      |  "(" "ObjType" <Id> ")"
//      |  "(" "ArrayType" Type ")"
//      
//
  static final public Ast.Type Type() throws ParseException {
  String nm; Ast.Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
                                    t = null;
      break;
    case 20:
      jj_consume_token(20);
                                    t = Ast.IntType;
      break;
    case 15:
      jj_consume_token(15);
                                    t = Ast.DblType;
      break;
    case 11:
      jj_consume_token(11);
                                    t = Ast.BoolType;
      break;
    case 40:
      jj_consume_token(40);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        nm = IdName();
                                    t = new Ast.ObjType(nm);
        break;
      case 8:
        jj_consume_token(8);
        t = Type();
                                    t = new Ast.ArrayType(t);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(41);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// Stmt -> "{" {Stmt} "}"
//      |  "Assign" Exp Exp
//      |  "CallStmt" Exp <Id> "(" {Exp} ")"
//      |  "If" Exp Stmt [ "Else" Stmt ]  
//      |  "While" Exp Stmt
//      |  "Print" Exp
//      |  "Return" Exp
//
  static final public Ast.Stmt Stmt() throws ParseException {
  List<Ast.Exp> args = new ArrayList<Ast.Exp>();
  List<Ast.Stmt> sl = new ArrayList<Ast.Stmt>();
  String nm;
  Ast.Exp arg, lhs, rhs, obj, cond, val;
  Ast.Stmt s, s1, s2=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
      jj_consume_token(42);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 9:
        case 13:
        case 19:
        case 25:
        case 27:
        case 32:
        case 42:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
        s = Stmt();
                     sl.add(s);
      }
      jj_consume_token(43);
                                           s = new Ast.Block(sl);
      break;
    case 9:
      jj_consume_token(9);
      lhs = Exp();
      rhs = Exp();
                                    s = new Ast.Assign(lhs, rhs);
      break;
    case 13:
      jj_consume_token(13);
      obj = Exp();
      nm = IdName();
      jj_consume_token(40);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 28:
        case IntLit:
        case DblLit:
        case BoolLit:
        case StrLit:
        case Id:
        case 40:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        arg = Exp();
                                                       args.add(arg);
      }
      jj_consume_token(41);
                                    s = new Ast.CallStmt(obj, nm, args);
      break;
    case 19:
      jj_consume_token(19);
      cond = Exp();
      s1 = Stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
        s2 = Stmt();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
                                    s = new Ast.If(cond, s1, s2);
      break;
    case 32:
      jj_consume_token(32);
      cond = Exp();
      s = Stmt();
                                    s = new Ast.While(cond, s);
      break;
    case 25:
      jj_consume_token(25);
      arg = Exp();
                                    s = new Ast.Print(arg);
      break;
    case 27:
      jj_consume_token(27);
      val = Exp();
                                    s = new Ast.Return(val);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BOP binOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
             {if (true) return Ast.BOP.ADD;}
      break;
    case 45:
      jj_consume_token(45);
             {if (true) return Ast.BOP.SUB;}
      break;
    case 46:
      jj_consume_token(46);
             {if (true) return Ast.BOP.MUL;}
      break;
    case 47:
      jj_consume_token(47);
             {if (true) return Ast.BOP.DIV;}
      break;
    case 48:
      jj_consume_token(48);
             {if (true) return Ast.BOP.AND;}
      break;
    case 49:
      jj_consume_token(49);
             {if (true) return Ast.BOP.OR;}
      break;
    case 50:
      jj_consume_token(50);
             {if (true) return Ast.BOP.EQ;}
      break;
    case 51:
      jj_consume_token(51);
             {if (true) return Ast.BOP.NE;}
      break;
    case 52:
      jj_consume_token(52);
             {if (true) return Ast.BOP.LT;}
      break;
    case 53:
      jj_consume_token(53);
             {if (true) return Ast.BOP.LE;}
      break;
    case 54:
      jj_consume_token(54);
             {if (true) return Ast.BOP.GT;}
      break;
    case 55:
      jj_consume_token(55);
             {if (true) return Ast.BOP.GE;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.UOP unOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
             {if (true) return Ast.UOP.NEG;}
      break;
    case 56:
      jj_consume_token(56);
             {if (true) return Ast.UOP.NOT;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//  Exp -> "(" ")"
//      |  "(" "Binop" BOP Exp Exp ")"
//      |  "(" "Unop" UOP Exp ")"
//      |  "(" "Call" Exp <Id> "(" {Exp} ")" ")"
//      |  "(" "NewObj" <Id> ")"
//      |  "(" "Field" Exp <Id> ")"
//      |  "(" "NewArray" Type <IntLit> ")"
//      |  "(" "ArrayElm" Exp Exp ")"
//      | "This"
//      | <Id>
//      | <IntLit> | <DblLit> | <BoolLit> | <StrLit>
//
  static final public Ast.Exp Exp() throws ParseException {
  List<Ast.Exp> args = new ArrayList<Ast.Exp>();
  String nm, s;
  Ast.IntLit ilit;
  Ast.BOP bop;
  Ast.UOP uop;
  Ast.Type et;
  Ast.Exp e=null, e1, e2, arg, obj, ar, idx;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
      case 10:
      case 12:
      case 17:
      case 22:
      case 23:
      case 29:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 10:
          jj_consume_token(10);
          bop = binOp();
          e1 = Exp();
          e2 = Exp();
                                              e = new Ast.Binop(bop, e1, e2);
          break;
        case 29:
          jj_consume_token(29);
          uop = unOp();
          e = Exp();
                                              e = new Ast.Unop(uop, e);
          break;
        case 12:
          jj_consume_token(12);
          obj = Exp();
          nm = IdName();
          jj_consume_token(40);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 28:
            case IntLit:
            case DblLit:
            case BoolLit:
            case StrLit:
            case Id:
            case 40:
              ;
              break;
            default:
              jj_la1[15] = jj_gen;
              break label_9;
            }
            arg = Exp();
                                                     args.add(arg);
          }
          jj_consume_token(41);
                                              e = new Ast.Call(obj, nm, args);
          break;
        case 23:
          jj_consume_token(23);
          nm = IdName();
                                              e = new Ast.NewObj(nm);
          break;
        case 17:
          jj_consume_token(17);
          obj = Exp();
          nm = IdName();
                                              e = new Ast.Field(obj, nm);
          break;
        case 22:
          jj_consume_token(22);
          et = Type();
          ilit = IntLit();
                                              e = new Ast.NewArray(et, ilit.i);
          break;
        case 7:
          jj_consume_token(7);
          ar = Exp();
          idx = Exp();
                                              e = new Ast.ArrayElm(ar, idx);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(41);
      break;
    case 28:
      jj_consume_token(28);
                          e = Ast.This;
      break;
    case Id:
      nm = IdName();
                          e = new Ast.Id(nm);
      break;
    case IntLit:
      e = IntLit();
      break;
    case DblLit:
      e = DblLit();
      break;
    case BoolLit:
      e = BoolLit();
      break;
    case StrLit:
      e = StrLit();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public String IdName() throws ParseException {
  Token n;
    n = jj_consume_token(Id);
           {if (true) return n.image;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.IntLit IntLit() throws ParseException {
  Token n;
    n = jj_consume_token(IntLit);
               {if (true) return new Ast.IntLit(Integer.parseInt(n.image));}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.DblLit DblLit() throws ParseException {
  Token n;
    n = jj_consume_token(DblLit);
               {if (true) return new Ast.DblLit(Double.parseDouble(n.image));}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BoolLit BoolLit() throws ParseException {
  Token n;
    n = jj_consume_token(BoolLit);
                {if (true) return new Ast.BoolLit(Boolean.parseBoolean(n.image));}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.StrLit StrLit() throws ParseException {
  Token n;
    n = jj_consume_token(StrLit);
               {if (true) return new Ast.StrLit(n.image.substring(1,n.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AstParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x0,0x40000000,0x200000,0x0,0x40000000,0xa082200,0x1000100,0x80108800,0xa082200,0x10000000,0x10000,0xa082200,0x0,0x0,0x10000000,0x20c21480,0x20c21480,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80,0x0,0x0,0x100,0x0,0x401,0x0,0x100,0x401,0x19e,0x0,0x401,0xfff000,0x1002000,0x19e,0x0,0x0,0x19e,};
   }

  /** Constructor with InputStream. */
  public AstParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AstParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AstParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AstParser(AstParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
